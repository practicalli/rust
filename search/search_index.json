{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Rust","text":"<p>Practicalli Rust is a hands-on guide to using the Rust programming language throughout all the software development stages.</p> <p>Live coding videos demonstrate the Rust workflow in action, showing how to get the most out of the unique approach the language provides.</p> <p>Practical code examples are supported by discussions of the concepts behind Rust, including functional programming and effective tooling.</p> <p>Rust Language Homepage</p>"},{"location":"#rust-community","title":"Rust community","text":"<p>The Rust Book</p> <p>Rust API</p> <p> Rust blog</p> <p>Rust online playground</p>"},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"editors/","title":"Editors for Rust","text":"<ul> <li>Neovim - Treesitter Rust parser, rusacea.nvim</li> <li>Emacs</li> <li>VS Code</li> <li>RustRover</li> </ul>"},{"location":"editors/#rust-lsp-server","title":"Rust LSP server","text":"<p>Editors with Rust support benefits from the rust-analyser, a Language Server Protocol (LSP) implementation for the Rust language.</p> <p>The rust-analyser server runs a static analysis of the code in a project, returning data about syntax errors and language idioms.</p> <p>Data is used by LSP clients which are found in the majority of editors (or editor extensions) to display diagnostics in the user interface.</p>"},{"location":"editors/emacs/","title":"Emacs","text":"<p>Rust-mode provides core workflow support. rustic</p>"},{"location":"editors/emacs/#rust-mode","title":"Rust-mode","text":"<p><code>rust-mode</code> makes editing Rust code with Emacs enjoyable. It requires Emacs 25 or later, and is included in both Emacs Prelude and Spacemacs by default.</p> <p>rust-mode provides:</p> <ul> <li>Syntax highlighting (for Font Lock Mode)</li> <li>Indentation</li> <li>Integration with Cargo, clippy and rustfmt</li> </ul> <p>This mode does not provide auto completion, or jumping to function / trait definitions.</p>"},{"location":"editors/emacs/#rustic-mode","title":"rustic mode","text":"<p>Rustic is based on rust-mode and provides additional features:</p> <ul> <li>cargo popup</li> <li>multiline error parsing</li> <li>translation of ANSI control sequences through   xterm-color</li> <li>async org babel</li> <li>automatic LSP configuration with   eglot or   lsp-mode</li> <li>[eask][] for testing</li> </ul> <p>rustic only shares the rust-mode code from rust-mode.el and rust-utils.el.</p>"},{"location":"editors/emacs/#lsp-client","title":"LSP client","text":""},{"location":"editors/neovim/","title":"Neovim for Rust","text":"<p>Neovim provides excellent syntax support via the Treesiter parser for rust.</p> <p>=== Practicalli Astro</p> <pre><code>Provides Rust support via the [Astrocommunity Rust pack](https://github.com/AstroNvim/astrocommunity/tree/main/lua/astrocommunity/pack/rust)\n\n!!! NOTE \"Add Astrocommunity Rust Pack\"\n    ```lua\n      { import = \"astrocommunity.pack.rust\" },\n    ```\n\n- rust Treesitter parser\n- rustaceanvim for language specific tooling\n- crates.nvim for crate management\n- TOML language support\n\n`rust-analyzer` shold be added via rustup\n\n!!! NOTE \"Install rust-analyzer via rustup\"\n    ```shell\n    rustup component add rust-analyzer\n    ```\n\n    ```shell-output\n    \u276f rustup component add rust-analyzer\n    info: downloading component 'rust-analyzer'\n    info: installing component 'rust-analyzer'\n    ```\n</code></pre> <p>rustaceanvim</p> <p>Provides advanced set of tools over the standard Neovim LSP Client that are specific to rust-analyzer</p>"},{"location":"editors/rustrover/","title":"RustRover","text":"<p>RustRover</p>"},{"location":"install/","title":"Install Rust","text":"<p>rustup is the defacto installer and version management tool for Rust.</p> Rustup Install Script <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> Install output <pre><code>\u276f curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ninfo: downloading installer\n\nWelcome to Rust!\n\nThis will download and install the official compiler for the Rust\nprogramming language, and its package manager, Cargo.\n\nRustup metadata and toolchains will be installed into the Rustup\nhome directory, located at:\n\n  /home/practicalli/.rustup\n\nThis can be modified with the RUSTUP_HOME environment variable.\n\nThe Cargo home directory is located at:\n\n  /home/practicalli/.cargo\n\nThis can be modified with the CARGO_HOME environment variable.\n\nThe cargo, rustc, rustup and other commands will be added to\nCargo's bin directory, located at:\n\n  /home/practicalli/.cargo/bin\n\nThis path will then be added to your PATH environment variable by\nmodifying the profile files located at:\n\n  /home/practicalli/.profile\n  /home/practicalli/.bashrc\n  /home/practicalli/.config/zsh/.zshenv\n\nYou can uninstall at any time with rustup self uninstall and\nthese changes will be reverted.\n\nCurrent installation options:\n\n\n   default host triple: x86_64-unknown-linux-gnu\n     default toolchain: stable (default)\n               profile: default\n  modify PATH variable: yes\n\n1) Proceed with standard installation (default - just press enter)\n2) Customize installation\n3) Cancel installation\n\ninfo: profile set to 'default'\ninfo: default host triple is x86_64-unknown-linux-gnu\ninfo: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\ninfo: latest update on 2025-05-15, rust version 1.87.0 (17067e9ac 2025-05-09)\ninfo: downloading component 'cargo'\ninfo: downloading component 'clippy'\ninfo: downloading component 'rust-docs'\n 19.9 MiB /  19.9 MiB (100 %)  13.6 MiB/s in  1s\ninfo: downloading component 'rust-std'\n 29.4 MiB /  29.4 MiB (100 %)  15.2 MiB/s in  2s\ninfo: downloading component 'rustc'\n 76.3 MiB /  76.3 MiB (100 %)  14.1 MiB/s in  5s\ninfo: downloading component 'rustfmt'\ninfo: installing component 'cargo'\ninfo: installing component 'clippy'\ninfo: installing component 'rust-docs'\n 19.9 MiB /  19.9 MiB (100 %)   5.9 MiB/s in  2s\ninfo: installing component 'rust-std'\n 29.4 MiB /  29.4 MiB (100 %)   9.4 MiB/s in  3s\ninfo: installing component 'rustc'\n 76.3 MiB /  76.3 MiB (100 %)  10.9 MiB/s in  7s\ninfo: installing component 'rustfmt'\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n\n  stable-x86_64-unknown-linux-gnu installed - rustc 1.87.0 (17067e9ac 2025-05-09)\n\n\nRust is installed now. Great!\n\nTo get started you may need to restart your current shell.\nThis would reload your PATH environment variable to include\nCargo's bin directory (/home/practicalli/.rust/cargo/bin).\n\nTo configure your current shell, you need to source\nthe corresponding env file under /home/practicalli/.rust/cargo/.\n\nThis is usually done by running one of the following (note the leading DOT):\n. \"/home/practicalli/.rust/cargo/env\"            # For sh/bash/zsh/ash/dash/pdksh\nsource \"/home/practicalli/.rust/cargo/env.fish\"  # For fish\nsource $\"/home/practicalli/.rust/cargo/env.nu\"   # For nushell\n</code></pre> Custom install locations <p>Set <code>RUSTUP_HOME</code> and <code>CARGO_HOME</code> environment variables to use a custom location.</p> ~/.zshrc<pre><code># Rust Lang Development tools\nexport RUSTUP_HOME=\"${RUSTUP_HOME:=$HOME/.config/rust/rustup}\"\nexport CARGO_HOME=\"${CARGO_HOME:=$HOME/.config/rust/cargo}\"\n</code></pre> <pre><code>\u276f curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ninfo: downloading installer\n\nWelcome to Rust!\n\nThis will download and install the official compiler for the Rust\nprogramming language, and its package manager, Cargo.\n\nRustup metadata and toolchains will be installed into the Rustup\nhome directory, located at:\n\n  /home/practicalli/.config/rust/rustup/\n\nThis can be modified with the RUSTUP_HOME environment variable.\n\nThe Cargo home directory is located at:\n\n  /home/practicalli/.config/rust/cargo/\n\nThis can be modified with the CARGO_HOME environment variable.\n\nThe cargo, rustc, rustup and other commands will be added to\nCargo's bin directory, located at:\n\n  /home/practicalli/.config/rust/cargo/bin\n\nThis path will then be added to your PATH environment variable by\nmodifying the profile files located at:\n\n  /home/practicalli/.profile\n  /home/practicalli/.bashrc\n  /home/practicalli/.config/zsh/.zshenv\n\nYou can uninstall at any time with rustup self uninstall and\nthese changes will be reverted.\n\nCurrent installation options:\n\n\n   default host triple: x86_64-unknown-linux-gnu\n     default toolchain: stable (default)\n               profile: default\n  modify PATH variable: yes\n\n1) Proceed with standard installation (default - just press enter)\n2) Customize installation\n3) Cancel installation\n\n\ninfo: profile set to 'default'\ninfo: default host triple is x86_64-unknown-linux-gnu\ninfo: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\ninfo: latest update on 2025-05-15, rust version 1.87.0 (17067e9ac 2025-05-09)\ninfo: downloading component 'cargo'\ninfo: downloading component 'clippy'\ninfo: downloading component 'rust-docs'\n 19.9 MiB /  19.9 MiB (100 %)  13.6 MiB/s in  1s\ninfo: downloading component 'rust-std'\n 29.4 MiB /  29.4 MiB (100 %)  15.2 MiB/s in  2s\ninfo: downloading component 'rustc'\n 76.3 MiB /  76.3 MiB (100 %)  14.1 MiB/s in  5s\ninfo: downloading component 'rustfmt'\ninfo: installing component 'cargo'\ninfo: installing component 'clippy'\ninfo: installing component 'rust-docs'\n 19.9 MiB /  19.9 MiB (100 %)   5.9 MiB/s in  2s\ninfo: installing component 'rust-std'\n 29.4 MiB /  29.4 MiB (100 %)   9.4 MiB/s in  3s\ninfo: installing component 'rustc'\n 76.3 MiB /  76.3 MiB (100 %)  10.9 MiB/s in  7s\ninfo: installing component 'rustfmt'\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n\n  stable-x86_64-unknown-linux-gnu installed - rustc 1.87.0 (17067e9ac 2025-05-09)\n\n\nRust is installed now. Great!\n\nTo get started you may need to restart your current shell.\nThis would reload your PATH environment variable to include\nCargo's bin directory (/home/practicalli/.config/rust/cargo/bin).\n\nTo configure your current shell, you need to source\nthe corresponding env file under /home/practicalli/.config/rust/cargo.\n\nThis is usually done by running one of the following (note the leading DOT):\n. \"/home/practicalli/.config/rust/cargo/env\"            # For sh/bash/zsh/ash/dash/pdksh\nsource \"/home/practicalli/.config/rust/cargo/env.fish\"  # For fish\nsource $\"/home/practicalli/.config/rust/cargo/env.nu\"  # For nushell\n</code></pre>"},{"location":"install/#confirm-install","title":"Confirm Install","text":"<p><code>cargo --version</code> command in a terminal to test Rust and Cargo installed</p>"},{"location":"install/#tools","title":"Tools","text":"<p>The Rustup script installs several tools</p> <ul> <li>rust : version 1.87.0 (17067e9ac 2025-05-09)</li> <li>rustc :</li> <li>rustfmt :</li> <li>rust-std :</li> <li>rust-docs :</li> <li>cargo :</li> <li>clippy :</li> </ul>"},{"location":"install/#update","title":"Update","text":"<pre><code>rustup update\n</code></pre> <p>clangd for faster compilation speed ?</p>"},{"location":"introduction/features/","title":"Rust Features","text":"<p>Rust is a programming language built to be fast, secure and reliable.</p> <p>Rust is a statically and strongly typed systems programming language.</p> <p>Statically typed means all types are known at compile-time. Strongly typed means types are designed to make it harder to write incorrect programs.</p> <p>A successful compilation provides a high guarantee of correctness.</p> <p>Rust is safe by default; all memory accesses are checked. It is not possible to corrupt memory by accident.</p> <p>The unifying principles behind Rust are:</p> <ul> <li>strictly enforcing safe borrowing of data</li> <li>functions, methods and closures to operate on data</li> <li>tuples, structs and enums to aggregate data</li> <li>pattern matching to select and destructure data</li> <li>traits to define behaviour on data</li> </ul> <p>There is a fast-growing ecosystem of available libraries through Cargo to complement the standard library.</p>"},{"location":"introduction/features/#run-without-crash","title":"Run without Crash","text":"<p>Code should run without crashing, from the very first time it is run</p> <p>Rust is a statically typed language and leaves almost no room for errors that would cause a program to crash.</p>"},{"location":"introduction/features/#fast-runtime-execution","title":"Fast runtime execution","text":"<p>Rust is extremely fast when it comes to execution time.</p> <p>Zero-cost abstractions \u2014</p> <p>Rust code is compiled into Assembly using the LLVM back-end (also used by C).</p> <p>Programming features like Generics and Collections do not come with runtime cost; it will only be slower to compile. (Source: stackoverflow).</p> <p>Builds optimized code for Generics</p> <p>Rust\u2019s compiler can smartly identify the generic code and optimize for each specific type</p>"},{"location":"introduction/features/#compilation-errors","title":"Compilation Errors","text":"<p>Rust\u2019s compiler gives excellent feedback in its error messages.</p> <p>The compiler may offer example code that can be used to resolve an error.</p>"},{"location":"introduction/features/#documentation","title":"Documentation","text":"<p>Rust has an amazing documentation and a tutorial guide called The Rust Book.</p>"},{"location":"introduction/features/#areas-of-use","title":"Areas of use","text":"<ul> <li>Server-side and other backend applications</li> <li>Cloud computing applications, services, and infrastructure</li> <li>Distributed systems</li> <li>Computer networking</li> <li>Computer security</li> <li>Embedded development</li> <li>Game development</li> <li>Web frontends (including WebAssembly)</li> </ul>"},{"location":"introduction/funtional-concepts/","title":"Functional Concepts","text":""},{"location":"introduction/memory-management/","title":"Memory Management","text":""},{"location":"introduction/rust-in-15-minutes/","title":"Rust In 15 Minutes","text":"<p>Examples showing the syntax and basic concepts of the Rust programming language.  Consider this a sneak peak for the rest of the book.</p>"},{"location":"projects/","title":"Projects","text":"<p>Cargo package manager is use to create and work with Rust projects.</p>"},{"location":"projects/#command-reference","title":"Command reference","text":"Command Description <code>cargo new project-name</code> Create a new rust project with given name <code>cargo build</code> Build rust project, resolving library dependencies <code>cargo run</code> Run Rust project <code>cargo test</code> Run test runner for Rust project <code>cargo doc</code> Generate Project documentation <code>cargo publish</code> Publish library to crates.io <p>## Create a new rust project</p> <pre><code>cargo new project-name\n</code></pre> <pre><code>\u276f cargo new playground\n    Creating binary (application) `playground` package\nnote: see more `Cargo.toml` keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n</code></pre> <p>Project structure</p> <pre><code>\u276f tree playground\nplayground\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main.rs\n\n2 directories, 2 files\n</code></pre>"},{"location":"projects/#library-dependencies","title":"Library Dependencies","text":"<p><code>Cargo.toml</code> file in the root of a project is used to define library dependencies for the project.</p> <p>Define a dependency with its name and version.</p> <pre><code>[dependencies]\nferris-says = \"0.3.1\"\n</code></pre> <p><code>Cargo.lock</code> contains a log of the specific versions of dependencies for the project, created and updated by the <code>cargo build</code> command.</p> <p>Make the library available with the <code>use</code> directive</p> <pre><code>use ferris_says::say; // from the previous step\nuse std::io::{stdout, BufWriter};\n\nfn main() {\n    let stdout = stdout();\n    let message = String::from(\"Hello fellow Rustaceans!\");\n    let width = message.chars().count();\n\n    let mut writer = BufWriter::new(stdout.lock());\n    say(&amp;message, width, &amp;mut writer).unwrap();\n}\n</code></pre> <p><code>cargo run</code> will execute the <code>main</code> function and return the result (if there is one).</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/books/","title":"Rust Books","text":"<p>Learn Rust aka 'The Rust Book'.</p> <p>Idioomatic Rust covers design patterns for using rust effectively (video edition - author reading book)</p>"},{"location":"reference/books/#video","title":"Video","text":""}]}